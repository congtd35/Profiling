<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hồ Sơ Cá Nhân - Tạ Duy Công</title>
    <style>
        :root {
            --main-color: #F07423;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Arial, sans-serif;
        }

        body {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Arial, sans-serif;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background: #f5f5f5;
        }

        .color-picker-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: flex;
            align-items: center;
            background: white;
            padding: 8px 15px;
            border-radius: 30px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            z-index: 1000;
        }

        .color-picker-label {
            margin-right: 10px;
            font-weight: 500;
            color: #333;
            cursor: pointer;
        }

        .color-picker {
            width: 40px;
            height: 40px;
            border: 2px solid #eee;
            border-radius: 50%;
            cursor: pointer;
            padding: 0;
            background: none;
        }

        .color-picker::-webkit-color-swatch {
            border-radius: 50%;
            border: 2px solid #fff;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
        }

        .color-picker::-moz-color-swatch {
            border-radius: 50%;
            border: 2px solid #fff;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
        }

        .profile-container {
            display: flex;
            width: 100%;
            max-width: 1200px;
            margin: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border-radius: 20px;
            overflow: hidden;
        }

        .left-panel {
            background-color: var(--main-color);
            color: white;
            padding: 40px 30px;
            width: 35%;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .right-panel {
            background: white;
            padding: 40px 30px;
            width: 65%;
        }

        .profile-card {
            width: 100%;
            text-align: center;
            transition: transform 0.3s ease;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .profile-card:hover {
            transform: translateY(-5px);
        }

        .avatar-container {
            position: relative;
            width: 200px;
            height: 200px;
            margin: 0 auto 20px;
            border-radius: 50%;
            overflow: hidden;
            cursor: pointer;
        }

        .avatar {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid white;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .avatar-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .avatar-container:hover .avatar-overlay {
            opacity: 1;
        }

        .avatar-container:hover .avatar {
            transform: scale(1.05);
        }

        .edit-text {
            color: white;
            font-size: 16px;
            margin-top: 5px;
            font-weight: 500;
        }

        .edit-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            padding: 10px;
        }

        .edit-icon {
            color: white;
            font-size: 24px;
            margin-bottom: 5px;
        }

        #avatarInput {
            display: none;
        }

        .name {
            font-size: 28px;
            color: white;
            margin-bottom: 15px;
            font-weight: 700;
        }

        .slogan {
            font-size: 16px;
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 30px;
            font-style: italic;
            opacity: 0;
            animation: fadeIn 2s ease forwards;
            line-height: 1.6;
            max-width: 100%;
            padding: 0 15px;
            min-height: 40px;
        }

        .section {
            margin-bottom: 20px;
        }

        .section-title {
            color: white;
            font-size: 20px;
            margin: 30px 0 20px;
            font-weight: 600;
            position: relative;
            text-align: left;
            width: 100%;
            padding-bottom: 10px;
            border-bottom: 2px solid rgba(255, 255, 255, 0.2);
        }

        .right-panel .section-title {
            color: var(--main-color);
            border-bottom: 2px solid #f0f0f0;
        }

        .info-container {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .info-item {
            display: flex;
            align-items: flex-start;
            gap: 10px;
            padding: 15px 0;
            background: transparent;
            border-radius: 0;
            cursor: pointer;
            transition: all 0.3s ease;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            width: 100%;
        }

        .right-panel .info-item {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 10px;
            border: none;
        }

        /* Skills Styles */
        .skills-container {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .skill-badge {
            padding: 12px 20px;
            background: #f8f9fa;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .skill-badge:hover {
            background: #00796b;
            color: white;
            transform: scale(1.05);
        }

        .skill-badge::after {
            content: '+';
            font-size: 18px;
            margin-left: 10px;
            transition: transform 0.3s ease;
        }

        .skill-badge.active::after {
            content: '-';
            transform: rotate(180deg);
        }

        .advanced-skills {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
            margin-top: 10px;
            background: #f8f9fa;
            border-radius: 10px;
            padding: 0 15px;
            display: flex;
            gap: 15px;
        }

        .advanced-skills.active {
            max-height: 500px;
        }

        .skill-item {
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #e9ecef;
        }

        .skill-item:last-child {
            border-bottom: none;
        }

        .skill-name {
            font-weight: 500;
            color: #185a9d;
        }

        .skill-level {
            color: #666;
            font-size: 14px;
        }

        .edit-icon {
            cursor: pointer;
            font-size: 16px;
            margin-left: 10px;
            transition: all 0.3s ease;
            opacity: 0;
            position: absolute;
            right: 0;
            top: 50%;
            width: 28px;
            height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            transform: translateY(-50%);
        }

        .section-header {
            position: relative;
            padding-right: 30px;
        }

        .contact-section .section-title,
        .hobbies-section .section-title,
        .quote-section .section-title {
            position: relative;
            padding-right: 30px;
        }

        .contact-section:hover .edit-icon,
        .hobbies-section:hover .edit-icon,
        .quote-section:hover .edit-icon,
        .projects-section:hover .edit-icon,
        #skillsSection:hover .edit-icon {
            opacity: 1;
            visibility: visible;
        }

        .section-title:hover .edit-icon {
            opacity: 1;
            visibility: visible;
        }

        .section.edit-mode .edit-icon {
            opacity: 1;
            visibility: visible;
        }

        .section.edit-mode .info-value {
            background: #f8f9fa;
            border-radius: 5px;
            padding: 5px;
            min-height: 20px;
        }

        .section.edit-mode .info-value::before {
            content: attr(data-placeholder);
            color: #666;
            pointer-events: none;
        }

        .section.edit-mode .info-value:not(:empty)::before {
            display: none;
        }

        .section.edit-mode .quote {
            background: #f8f9fa;
            border-radius: 5px;
            padding: 10px;
            min-height: 40px;
        }

        .section.edit-mode .project-title {
            background: #f8f9fa;
            border-radius: 5px;
            padding: 5px;
            min-height: 20px;
        }

        .section.edit-mode .project-features ul {
            background: #f8f9fa;
            border-radius: 5px;
            padding: 10px;
            min-height: 60px;
        }

        .section.edit-mode .project-features ul::before {
            content: "Nhập các tính năng (mỗi tính năng một dòng)";
            color: #666;
            pointer-events: none;
        }

        .section.edit-mode .project-features ul:not(:empty)::before {
            display: none;
        }

        .info-item:hover {
            transform: translateX(5px);
        }

        .info-label {
            color: white;
            font-weight: 600;
            min-width: 100px;
            text-align: left;
            opacity: 0.9;
        }

        .info-value {
            color: white;
            font-size: 14px;
            flex: 1;
            text-align: left;
            opacity: 0.9;
            padding: 4px 8px;
            border-radius: 4px;
            transition: all 0.2s ease;
            outline: none;
            border: 1px solid transparent;
        }

        .info-value:focus {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.5);
            box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.2);
        }

        .info-value[contenteditable="true"] {
            background: rgba(255, 255, 255, 0.1);
            border: 1px dashed rgba(255, 255, 255, 0.3);
        }

        .right-panel .info-label {
            color: var(--main-color);
        }

        .right-panel .info-value {
            color: #333;
        }

        .right-panel .save-btn {
            background: var(--main-color);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 15px;
            font-weight: 500;
            transition: all 0.2s ease;
            align-self: flex-start;
        }

        .right-panel .save-btn:hover {
            background: #fff;
            transform: translateY(-1px);
            color: var(--main-color);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .left-panel .save-btn {
            background: #fff;
            color: var(--main-color);
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 15px;
            font-weight: 500;
            transition: all 0.2s ease;
            align-self: flex-start;
        }

        .left-panel .save-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        .skills-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
        }

        .skill-badge {
            color: var(--main-color);
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 13px;
            transition: all 0.3s ease;
        }

        .skill-label {
            text-transform: capitalize;
        }

        .skill-badge:hover {
            background: var(--main-color);
            color: white;
            transform: scale(1.05);
        }

        .quote {
            font-style: italic;
            color: #666;
            margin: 0;
            padding: 20px;
            background: #f8f9fa;
            border-left: 4px solid var(--main-color);
            border-radius: 4px;
            min-height: 40px;
            transition: all 0.3s ease;
        }

        .quote[contenteditable="true"] {
            background: #f1f1f1;
            border: 1px dashed #ccc;
            outline: none;
        }

        .quote:focus {
            background: #fff;
            border: 1px solid #185a9d;
            box-shadow: 0 0 0 2px rgba(24, 90, 157, 0.2);
        }

        .quote-container {
            position: relative;
        }

        .projects-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .project-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            transition: all 0.3s ease;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }

        .project-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .project-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .project-title {
            color: var(--main-color);
            margin-bottom: 10px;
            font-size: 16px;
        }

        .project-link {
            text-decoration: none;
            font-weight: 600;
            display: inline-block;
            margin-bottom: 15px;
            transition: color 0.3s ease;
            color: var(--main-color);
            opacity: 0.5;
        }

        .project-link:hover {
            color: var(--main-color);
            opacity: 1;
        }

        .project-features ul {
            list-style-type: none;
            padding: 0;
        }

        .project-features li {
            padding: 8px 0;
            border-bottom: 1px solid #e9ecef;
            color: #333;
            font-size: 14px;
        }

        .project-features li:last-child {
            border-bottom: none;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Skills Edit Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(3px);
            z-index: 1000;
            justify-content: center;
            align-items: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .modal.show {
            opacity: 1;
        }

        .modal-content {
            background-color: white;
            border-radius: 12px;
            width: 90%;
            max-width: 650px;
            max-height: 85vh;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            transform: translateY(20px);
            transition: transform 0.3s ease, opacity 0.3s ease;
        }

        .modal.show .modal-content {
            transform: translateY(0);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 25px;
            background-color: var(--main-color);
            color: white;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .modal-header h3 {
            margin: 0;
            font-size: 1.4em;
            font-weight: 600;
        }

        .modal-close {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: white;
            font-size: 1.3em;
            transition: all 0.2s ease;
        }
        
        .modal-close:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: rotate(90deg);
        }

        .skill-category {
            border-radius: 10px;
            padding: 0;
        }
        
        .skill-category:hover {
            transform: translateY(-2px);
        }

        .skill-category-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background-color: #fff9f5;
            border-bottom: 1px solid #f0f0f0;
        }

        .category-name {
            padding: 10px 15px;
            border: 2px solid #e0e0e0;
            border-radius: 6px;
            font-size: 16px;
            width: 100%;
            transition: all 0.3s ease;
            outline: none;
            background-color: #fff;
        }
        
        .category-name:focus {
            border-color: var(--main-color);
            box-shadow: 0 0 0 3px rgba(240, 116, 35, 0.2);
        }
        
        .category-name::placeholder {
            color: #999;
        }
        
        .skill-input-group {
            display: flex;
            padding: 15px 20px;
            background-color: #f9f9f9;
            border-top: 1px solid #f0f0f0;
        }

        .skill-input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #e0e0e0;
            border-radius: 6px;
            margin-right: 8px;
            font-size: 0.95em;
            transition: all 0.2s ease;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
        }
        
        .skill-input:focus {
            outline: none;
            border-color: var(--main-color);
            box-shadow: 0 0 0 3px rgba(240, 116, 35, 0.15);
        }

        .skills-list {
            padding: 0 15px;
        }

        .btn {
            padding: 10px 18px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
            font-size: 0.95em;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .btn-primary {
            background-color: var(--main-color);
            color: white;
            font-weight: 600;
            padding: 10px 24px;
        }
        
        .btn-primary:hover {
            background-color: var(--main-color);
            box-shadow: 0 4px 12px rgba(240, 116, 35, 0.3);
        }

        .btn-danger {
            background-color: #f8f9fa;
            color: #dc3545;
            border: 1px solid #f0f0f0;
            margin-left: 5px;
            padding: 10px 24px;
        }
        
        .btn-danger:hover {
            background-color: #fff;
            color: #c82333;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .btn-sm {
            padding: 3px 8px;
            font-size: 0.8em;
        }

        .skill-tag {
            display: inline-flex;
            align-items: center;
            background-color: white;
            padding: 5px 12px;
            border-radius: 15px;
            margin: 5px;
            border: 1.5px dashed var(--main-color);
            color: #333;
            font-size: 0.9em;
            transition: all 0.2s ease;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        }
        
        .skill-tag:hover {
            background-color: #fff9f5;
            transform: translateY(-1px);
        }

        .skill-tag-remove {
            margin-left: 5px;
            cursor: pointer;
            color: #666;
        }

        .add-category-btn {
            width: calc(100% - 40px);
            margin: 20px;
            padding: 12px;
            background-color: #fff9f5;
            border: 2px dashed var(--main-color);
            border-radius: 8px;
            font-size: 0.95em;
            color: var(--main-color);
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .add-category-btn:hover {
            background-color: #fff4ed;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(240, 116, 35, 0.15);
        }

        .skill-item {
            margin: 5px;
            padding: 5px 10px;
            background-color: #f0f0f0;
            border-radius: 15px;
            display: inline-block;
            font-size: 0.9em;
            position: relative;
        }

        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
            margin-bottom: 20px;
        }

        /* Project Editor Styles */
        .project-edit-item {
            margin-bottom: 20px;
            padding: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            background-color: #fff;
        }

        .project-edit-header {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .project-edit-header input[type="text"] {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .features-list {
            margin: 10px 0;
        }

        .feature-item {
            display: flex;
            gap: 8px;
            margin-bottom: 8px;
            align-items: center;
        }

        .feature-input {
            flex: 1;
            padding: 6px 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .feature-input-group {
            display: flex;
            gap: 8px;
            margin-top: 10px;
        }

        .new-feature {
            flex: 1;
            padding: 6px 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .remove-project {
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 4px 8px;
            cursor: pointer;
            font-size: 12px;
        }

        .remove-feature {
            background: none;
            border: 1px solid #dc3545;
            color: #dc3545;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            padding: 0;
            line-height: 1;
        }

        .remove-feature:hover {
            background-color: #dc3545;
            color: white;
        }
    </style>
</head>

<body>
    <div class="profile-container">
        <div class="left-panel">
            <div class="profile-card">
                <div class="avatar-container" id="avatarContainer">
                    <img src="./avatar.jpg" alt="avatar" class="avatar" id="profileAvatar">
                    <div class="avatar-overlay">
                        <div class="edit-content">
                            <span class="edit-icon">✏️</span>
                            <span class="edit-text">Chỉnh sửa</span>
                        </div>
                    </div>
                    <input type="file" id="avatarInput" accept="image/*">
                </div>
                <h1 class="name" contenteditable="false" id="name"></h1>
                <p class="slogan" contenteditable="false">"Đam mê công nghệ, không ngừng học hỏi và sáng tạo"</p>
                <div class="section contact-section">
                    <div class="section-header">
                        <h2 class="section-title">
                            Thông Tin Cá Nhân
                            <span class="edit-icon" id="editContactBtn">✏️</span>
                        </h2>
                    </div>
                    <div class="info-container" id="contactInfo">
                        <div class="info-item">
                            <span class="info-label">Ngày sinh:</span>
                            <span class="info-value" contenteditable="false" id="birthday"></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Giới tính:</span>
                            <span class="info-value" contenteditable="false" id="gender"></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Địa chỉ:</span>
                            <span class="info-value" contenteditable="false" id="address"></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Số điện thoại:</span>
                            <span class="info-value" contenteditable="false" id="phone"></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Email:</span>
                            <span class="info-value" contenteditable="false" id="email"></span>
                        </div>
                        <button id="saveContactBtn" class="save-btn" style="display: none;">Lưu thay đổi</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="right-panel">
            <div class="profile-card">
                <div class="section hobbies-section">
                    <div class="section-header">
                        <h2 class="section-title">
                            Sở thích
                            <span class="edit-icon" id="editHobbiesBtn">✏️</span>
                        </h2>
                    </div>
                    <div class="info-container" id="hobbiesInfo">
                        <div class="info-item">
                            <span class="info-label">Học tập:</span>
                            <span class="info-value" contenteditable="false" id="hobby"></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Thể thao:</span>
                            <span class="info-value" contenteditable="false" id="sport"></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Giải trí:</span>
                            <span class="info-value" contenteditable="false" id="entertainment"></span>
                        </div>
                        <button id="saveHobbiesBtn" class="save-btn" style="display: none;">Lưu thay đổi</button>
                    </div>
                </div>

                <div class="section" id="skillsSection">
                    <h2 class="section-title">
                        Kỹ Năng <span class="edit-icon" id="editSkillsBtn">✏️</span>
                    </h2>
                    <div class="skills-container" id="skillsInfo">
                        
                    </div>
                </div>

                <div class="section projects-section">
                    <div class="section-header">
                        <h2 class="section-title">Dự án <span class="edit-icon" id="editProjectsBtn">✏️</span></h2>
                    </div>
                    <div class="projects-container"></div>
                </div>
                <div class="section quote-section">
                    <div class="section-header">
                        <h2 class="section-title">
                            Lời Trích Dẫn <span class="edit-icon" id="editQuoteBtn">✏️</span>
                        </h2>
                    </div>
                    <div class="quote-container">
                        <div class="quote" contenteditable="false" id="quoteText">
                            "Đừng bao giờ từ bỏ ước mơ của bạn. Những người thành công nhất là những người không bao giờ từ bỏ."
                        </div>
                        <button id="saveQuoteBtn" class="save-btn" style="display: none; margin-top: 10px;">Lưu thay đổi</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Color Picker -->
    <div class="color-picker-container">
        <span class="color-picker-label">
            <i class="fas fa-palette"></i>
        </span>
        <input type="color" id="mainColorPicker" class="color-picker" value="#F07423" title="Chọn màu chủ đạo">
    </div>
    
    <!-- Projects Edit Modal -->
    <div id="projectsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Chỉnh sửa dự án</h2>
                <span class="close" id="closeProjectsModal">&times;</span>
            </div>
            <div class="modal-body">
                <div id="projectsEditor"></div>
                <div class="modal-actions">
                    <button id="addProjectBtn" class="btn btn-primary">Thêm dự án</button>
                    <button id="saveProjectsBtn" class="btn btn-success">Lưu thay đổi</button>
                    <button id="cancelProjectsBtn" class="btn btn-secondary">Hủy</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Skills Edit Modal -->
    <div id="skillsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Chỉnh sửa kỹ năng</h3>
                <button class="modal-close" id="closeSkillsModal">&times;</button>
            </div>
            <div id="skillsEditor">
                <!-- Skill categories will be added here dynamically -->
            </div>
            <button id="addCategoryBtn" class="btn add-category-btn">+ Thêm danh mục kỹ năng</button>
            <div style="margin: 20px 20px 20px 0; text-align: right;">
                <button id="cancelSkillsBtn" class="btn" style="margin-right: 10px;">Hủy</button>
                <button id="saveSkillsBtn" class="btn btn-primary">Lưu thay đổi</button>
            </div>
        </div>
    </div>

    <script>

        // Constants
        // Change slogan periodically
        const slogans = [
            '"Đam mê công nghệ, không ngừng học hỏi và sáng tạo"',
            '"Xây dựng tương lai từ những dòng code"',
            '"Sáng tạo không giới hạn"'
        ];
        let currentSlogan = 0;
        const sloganElement = document.querySelector('.slogan');

        function changeSlogan() {
            currentSlogan = (currentSlogan + 1) % slogans.length;
            sloganElement.textContent = slogans[currentSlogan];
        }

        setInterval(changeSlogan, 5000);


        // Functions
        function saveToLocalStorage(key, value) {
            localStorage.setItem(key, JSON.stringify(value));
        }

        function loadFromLocalStorage(key) {
            const data = localStorage.getItem(key);
            return data ? JSON.parse(data) : null;
        }

        function loadSavedData() {
            loadBasicInfo();
            loadHoobiesInfo();
            loadSkillsInfo();
            loadProjectsInfo();
            
            // Load saved contact info
            const contactFields = document.querySelectorAll('#contactInfo .info-value');
            contactFields.forEach(field => {
                const savedValue = loadFromLocalStorage(`contact_${field.id}`);
                if (savedValue) {
                    field.textContent = savedValue;
                }
            });
            
            // Load saved hobbies
            const hobbyFields = document.querySelectorAll('#hobbiesInfo .info-value');
            hobbyFields.forEach(field => {
                const savedValue = loadFromLocalStorage(`hobby_${field.id}`);
                if (savedValue) {
                    field.textContent = savedValue;
                }
            });
            
            // Load saved quote
            const savedQuote = loadFromLocalStorage('quote');
            const quoteElement = document.getElementById('quoteText');
            if (savedQuote && quoteElement) {
                quoteElement.textContent = savedQuote;
            }
        };

        function loadProjectsInfo() {
            const projectsInfo = loadFromLocalStorage('projectsInfo') || [
                    {
                        title: "Website nghe nhạc",
                        link: "https://music-by-duycong.vercel.app/",
                        features: [
                            "Giao diện thân thiện, dễ sử dụng",
                            "Phát lại và phát ngẫu nhiên",
                            "Điều khiển phát nhạc đơn giản – phát/tạm dừng, tua tiến/lùi."
                        ]
                    }
                ];

            let projectContent = ``;
            projectsInfo.forEach(project => {
                projectContent += `
                    <div class="project-card">
                        <h3 class="project-title" contenteditable="false">${project.title}</h3>
                        <a href="${project.link}" class="project-link" target="_blank">Xem dự án</a>
                        <div class="project-features">
                            <ul contenteditable="false">
                                ${project.features.map(feature => `<li>${feature}</li>`).join('')}
                            </ul>
                        </div>
                    </div>
                `;
            });
            document.querySelector('.projects-container').innerHTML = projectContent;
        };

        function loadBasicInfo(){
            const basicInfo = loadFromLocalStorage('basicInfo') || {
                name: "Tạ Duy Công",
                birthday: "15/05/1999",
                gender: "Nam",
                address: "Hà Nội",
                phone: "0936661875",
                email: "congtd35@gmail.com"
            };
            document.getElementById('name').textContent = basicInfo.name;
            document.getElementById('birthday').textContent = basicInfo.birthday;
            document.getElementById('gender').textContent = basicInfo.gender;
            document.getElementById('address').textContent = basicInfo.address;
            document.getElementById('phone').textContent = basicInfo.phone;
            document.getElementById('email').textContent = basicInfo.email;
        };

        function loadHoobiesInfo() {
            const hobbiesInfo = loadFromLocalStorage("hobbiesInfo") || {
                hobby: "Đọc sách, học lập trình",
                sport: "Bóng đá, cầu lông",
                entertainment: "Xem phim, nghe nhạc"
            };
            document.getElementById('hobby').textContent = hobbiesInfo.hobby;
            document.getElementById('sport').textContent = hobbiesInfo.sport;
            document.getElementById('entertainment').textContent = hobbiesInfo.entertainment;
        };

        function loadSkillsInfo() {
            const skills = loadFromLocalStorage("skillsInfo") || {
                frontend: ["HTML", "CSS", "JS", "React"],
                backend: ["Node.js", "Python", "Java"],
                database: ["MySQL", "MongoDB", "Elasticsearch"],
                deploy: ["Nginx", "Docker"]
            };
            let skillContent = ``;
            Object.keys(skills).forEach(key => {
                let advancedSkillsContent = ``;
                skills[key].forEach(skill => advancedSkillsContent += `<div class="skill-item"><span class="skill-name">${skill}</span></div>`);
                skillContent += `<div class="skill-category">
                     <div class="skill-badge" data-category="${key}">
                        <span class="skill-label">${key}</span>
                    </div>
                    <div class="advanced-skills" data-category="${key}">
                        ${advancedSkillsContent}
                    </div>
                </div>`;
            });
            document.getElementById("skillsInfo").innerHTML = skillContent;
            // Gắn sự kiện click cho các skill-badge
            const skillBadges = document.querySelectorAll('.skill-badge');
            skillBadges.forEach(badge => {
                badge.addEventListener('click', () => {
                    const category = badge.getAttribute('data-category');
                    const advancedSkills = document.querySelector(`.advanced-skills[data-category="${category}"]`);
                    if (advancedSkills) {
                        // Toggle lớp active
                        advancedSkills.classList.toggle('active');
                        badge.classList.toggle('active');
                    }
                });
            });
        };

        // Save functions
        function saveBasicInfo() {
            const name = document.querySelector('.name').textContent;
            const slogan = document.querySelector('.slogan').textContent;
            saveToLocalStorage('basicInfo', { name, slogan });
        }

        function saveContactInfo() {
            const values = Array.from(document.querySelectorAll('.section-title + .info-container .info-value'))
                .map(value => value.textContent);
            saveToLocalStorage('contactInfo', values);
        }

        function saveHobbiesInfo() {
            saveToLocalStorage('hobbiesInfo', {
                hobby: document.getElementById('hobby').textContent,
                sport: document.getElementById('sport').textContent,
                entertainment: document.getElementById('entertainment').textContent
            });
        }

        function saveProjectsInfo() {
            const title = document.querySelector('.project-title').textContent;
            const features = document.querySelector('.project-features ul').innerHTML;
            saveToLocalStorage('projectInfo', { title, features });
        }

        function saveQuote() {
            const quote = document.querySelector('.quote').textContent;
            saveToLocalStorage('quote', quote);
        }

        // Add animation to skills badges
        const skillBadges = document.querySelectorAll('.skill-badge');

        // Save functions
        function saveBasicInfo() {
            const name = document.querySelector('.name').textContent;
            const slogan = document.querySelector('.slogan').textContent;
            saveToLocalStorage('basicInfo', { name, slogan });
        }

        function saveContactInfo() {
            const values = Array.from(document.querySelectorAll('.section-title + .info-container .info-value'))
                .map(value => value.textContent);
            saveToLocalStorage('contactInfo', values);
        }

        function saveHobbiesInfo() {
            const values = Array.from(document.querySelectorAll('.section-title + .info-container .info-value'))
                .map(value => value.textContent);
            saveToLocalStorage('hobbiesInfo', values);
        }

        function saveProjectsInfo() {
            const title = document.querySelector('.project-title').textContent;
            const features = document.querySelector('.project-features ul').innerHTML;
            saveToLocalStorage('projectInfo', { title, features });
        }

        function saveQuote() {
            const quote = document.querySelector('.quote').textContent;
            saveToLocalStorage('quote', quote);
        }

        // Generic function to handle section editing
        function setupEditableSection(options) {
            const {
                editBtnId,
                saveBtnId,
                containerId,
                fieldsSelector,
                isSingleField = false
            } = options;

            const editBtn = document.getElementById(editBtnId);
            const saveBtn = document.getElementById(saveBtnId);
            const container = document.getElementById(containerId);
            const fields = isSingleField 
                ? [document.querySelector(fieldsSelector)] 
                : container.querySelectorAll(fieldsSelector);
            
            let originalValues = {};

            // Show edit button on section hover
            const section = container.closest('.section');
            section.addEventListener('mouseenter', () => {
                editBtn.style.opacity = '1';
            });

            section.addEventListener('mouseleave', () => {
                if (!container.classList.contains('editing')) {
                    editBtn.style.opacity = '0';
                }
            });

            // Enable editing mode
            editBtn.addEventListener('click', () => {
                container.classList.add('editing');
                if (saveBtn) saveBtn.style.display = 'block';
                editBtn.style.opacity = '1';
                
                // Store original values
                fields.forEach(field => {
                    if (field) {
                        originalValues[field.id || 'content'] = field.textContent;
                        field.setAttribute('contenteditable', 'true');
                        field.focus();
                    }
                });
            });

            // Save changes
            const saveChanges = () => {
                container.classList.remove('editing');
                if (saveBtn) saveBtn.style.display = 'none';
                editBtn.style.opacity = '0';
                if(saveBtnId === 'saveContactBtn') {
                    saveToLocalStorage("basicInfo", {
                    name: document.querySelector('#name').textContent,
                    birthday: document.querySelector('#birthday').textContent,
                    gender: document.querySelector('#gender').textContent,
                    address: document.querySelector('#address').textContent,
                    phone: document.querySelector('#phone').textContent,
                    email: document.querySelector('#email').textContent,
                }) 
                } else if(saveBtnId === 'saveHobbiesBtn') {
                    saveToLocalStorage("hobbiesInfo", {
                        hobby: document.getElementById('hobby').textContent,
                        sport: document.getElementById('sport').textContent,
                        entertainment: document.getElementById('entertainment').textContent
                    })
                }
                
            
                
                // Show success message
                showSuccessMessage(container);
            };

            if (saveBtn) {
                saveBtn.addEventListener('click', saveChanges);
            }

            // Handle Enter key to save (for single field editing like quote)
            if (isSingleField && fields[0]) {
                fields[0].addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        saveChanges();
                    }
                });
            }

            // Handle Escape key to cancel editing
            container.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && container.classList.contains('editing')) {
                    fields.forEach(field => {
                        if (field) {
                            field.textContent = originalValues[field.id || 'content'];
                            field.setAttribute('contenteditable', 'false');
                        }
                    });
                    container.classList.remove('editing');
                    if (saveBtn) saveBtn.style.display = 'none';
                    editBtn.style.opacity = '0';
                }
            });
        }

        // Show success message
        function showSuccessMessage(container) {
            const successMsg = document.createElement('div');
            successMsg.textContent = 'Đã lưu thay đổi!';
            successMsg.style.color = '#FFF';
            successMsg.style.marginTop = '10px';
            successMsg.style.fontSize = '14px';
            
            // Remove any existing success messages
            const existingMsg = container.querySelector('.success-message');
            if (existingMsg) existingMsg.remove();
            
            successMsg.className = 'success-message';
            container.appendChild(successMsg);
            
            setTimeout(() => {
                successMsg.style.opacity = '0';
                setTimeout(() => successMsg.remove(), 300);
            }, 2000);
        }

        // Load saved color from localStorage
        function loadSavedColor() {
            const savedColor = localStorage.getItem('mainColor');
            if (savedColor) {
                document.documentElement.style.setProperty('--main-color', savedColor);
                document.getElementById('mainColorPicker').value = savedColor;
            }
        }

        // Handle color picker change
        function setupColorPicker() {
            const colorPicker = document.getElementById('mainColorPicker');
            colorPicker.addEventListener('input', (e) => {
                const newColor = e.target.value;
                document.documentElement.style.setProperty('--main-color', newColor);
                localStorage.setItem('mainColor', newColor);
            });
        }

        // Handle avatar change
        function setupAvatarChange() {
            const avatarContainer = document.getElementById('avatarContainer');
            const avatarInput = document.getElementById('avatarInput');
            const profileAvatar = document.getElementById('profileAvatar');

            avatarContainer.addEventListener('click', () => {
                avatarInput.click();
            });

            avatarInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        profileAvatar.src = event.target.result;
                        // Save to localStorage
                        localStorage.setItem('profileAvatar', event.target.result);
                    };
                    reader.readAsDataURL(file);
                }
            });

            // Load saved avatar if exists
            const savedAvatar = localStorage.getItem('profileAvatar');
            if (savedAvatar) {
                profileAvatar.src = savedAvatar;
            }
        }

        // Initialize editable sections
        document.addEventListener('DOMContentLoaded', () => {
            setupAvatarChange();
            loadSavedColor();
            setupColorPicker();
            // Contact Info
            setupEditableSection({
                editBtnId: 'editContactBtn',
                saveBtnId: 'saveContactBtn',
                containerId: 'contactInfo',
                fieldsSelector: '.info-value'
            });

            // Hobbies
            setupEditableSection({
                editBtnId: 'editHobbiesBtn',
                saveBtnId: 'saveHobbiesBtn',
                containerId: 'hobbiesInfo',
                fieldsSelector: '.info-value'
            });

            // Quote
            setupEditableSection({
                editBtnId: 'editQuoteBtn',
                saveBtnId: 'saveQuoteBtn',
                containerId: 'quoteText',
                fieldsSelector: '#quoteText',
                isSingleField: true
            });
        });

        // All edit functionality is now handled by the setupEditableSection function

        // Skills Editing Functionality
        const skillsModal = document.getElementById('skillsModal');
        const closeSkillsModal = document.getElementById('closeSkillsModal');
        const cancelSkillsBtn = document.getElementById('cancelSkillsBtn');
        const skillsEditor = document.getElementById('skillsEditor');
        let skillsData = {};

        // Initialize skills editor
        function initSkillsEditor() {
            console.log('Initializing skills editor...');
            const editBtn = document.getElementById('editSkillsBtn');
            if (!editBtn) {
                console.error('Edit button not found!');
                return;
            }

            
            // Show/hide edit button on hover
            const skillsSection = document.getElementById('skillsSection');
            if (skillsSection) {
                skillsSection.style.position = 'relative';
                
                skillsSection.addEventListener('mouseenter', () => {
                    console.log('Mouse entered skills section');
                    editBtn.style.opacity = '1';
                });

                skillsSection.addEventListener('mouseleave', () => {
                    console.log('Mouse left skills section');
                    if (!skillsModal.classList.contains('editing')) {
                        editBtn.style.opacity = '0';
                    }
                });
            } else {
                console.error('Skills section not found!');
            }

            // Open modal when edit button is clicked
            editBtn.addEventListener('click', (e) => {
                console.log('Edit button clicked');
                e.stopPropagation();
                openSkillsEditor();
            });
        }

        // Open skills editor modal
        function openSkillsEditor() {
            console.log('Opening skills editor...');
            
            // Load current skills data
            const skillsContainer = document.querySelector('#skillsInfo');
            if (!skillsContainer) {
                console.error('Skills container not found!');
                return;
            }
            
            console.log('Found skills container:', skillsContainer);
            // skillsData = {};
            
            Array.from(skillsContainer.children).forEach((categoryEl, index) => {
                console.log(`Processing category ${index}:`, categoryEl);
                const categoryHeader = categoryEl.querySelector('h4');
                if (!categoryHeader) {
                    console.warn('Category header not found in element:', categoryEl);
                    return;
                }
                
                const categoryName = categoryHeader.textContent.trim();
                console.log(`Found category: ${categoryName}`);
                
                if (categoryName) {
                    const skillItems = Array.from(categoryEl.querySelectorAll('.skill-badge'))
                        .map(item => item.textContent.trim());
                    console.log(`Found ${skillItems.length} skills in ${categoryName}:`, skillItems);
                    skillsData[categoryName] = skillItems;
                }
            });
            
            console.log('Current skills data:', skillsData);
            
            try {
                renderSkillsEditor();
                
                // Show the modal
                skillsModal.style.display = 'flex';
                document.body.style.overflow = 'hidden';
                
                // Trigger reflow to enable CSS transitions
                void skillsModal.offsetWidth;
                
                // Add show class for animation
                skillsModal.classList.add('show');
                console.log('Skills modal should now be visible');
                
                // Update edit icon opacity
                const editIcon = document.querySelector('.edit-icon');
                if (editIcon) {
                    editIcon.style.opacity = '1';
                }
            } catch (error) {
                console.error('Error in openSkillsEditor:', error);
            }
        }
        // Render skills editor UI
        function renderSkillsEditor() {
            skillsEditor.innerHTML = '';
            
            Object.entries(skillsData).forEach(([category, skills], index) => {
                const categoryId = `category-${index}`;
                const categoryEl = document.createElement('div');
                categoryEl.className = 'skill-category';
                categoryEl.dataset.category = category;
                
                categoryEl.innerHTML = `
                    <div class="skill-category-header">
                        <input type="text" class="category-name" value="${category}" placeholder="Tên danh mục">
                        <button class="btn btn-danger btn-sm remove-category" data-category="${category}">Xóa</button>
                    </div>
                    <div class="skills-list" id="${categoryId}">
                        ${skills.map(skill => `
                            <div class="skill-tag">
                                ${skill}
                                <span class="skill-tag-remove" data-skill="${skill}">&times;</span>
                            </div>
                        `).join('')}
                    </div>
                    <div class="skill-input-group">
                        <input type="text" class="skill-input" placeholder="Thêm kỹ năng mới">
                        <button class="btn btn-primary btn-sm add-skill" data-category="${category}">Thêm</button>
                    </div>
                `;
                
                skillsEditor.appendChild(categoryEl);
            });
            
            // Add event listeners
            addEventListenersToEditor();
        }

        // Add event listeners to editor elements
        function addEventListenersToEditor() {
            // Add skill
            document.querySelectorAll('.add-skill').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const category = e.target.dataset.category;
                    const input = e.target.previousElementSibling;
                    const skill = input.value.trim();
                    
                    if (skill && !skillsData[category].includes(skill)) {
                        skillsData[category].push(skill);
                        renderSkillsEditor();
                    }
                    input.value = '';
                });
            });
            
            // Remove skill
            document.querySelectorAll('.skill-tag-remove').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const skill = e.target.dataset.skill;
                    const category = e.target.closest('.skill-category').querySelector('.category-name').value;
                    
                    if (skillsData[category]) {
                        skillsData[category] = skillsData[category].filter(s => s !== skill);
                        if (skillsData[category].length === 0) {
                            delete skillsData[category];
                        }
                        renderSkillsEditor();
                    }
                });
            });
            
            // Remove category
            document.querySelectorAll('.remove-category').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const category = e.target.dataset.category;
                    if (confirm(`Xóa danh mục "${category}" và tất cả kỹ năng bên trong?`)) {
                        delete skillsData[category];
                        renderSkillsEditor();
                    }
                });
            });
            
            // Update category name
            document.querySelectorAll('.category-name').forEach(input => {
                input.addEventListener('change', (e) => {
                    const oldCategory = e.target.closest('.skill-category').dataset.category;
                    const newCategory = e.target.value.trim();
                    
                    if (newCategory && newCategory !== oldCategory) {
                        skillsData[newCategory] = [...(skillsData[oldCategory] || [])];
                        delete skillsData[oldCategory];
                        renderSkillsEditor();
                    }
                });
            });
        }

        // Save skills to local storage and update UI
        function saveSkills() {
            // Update skills data with any pending changes
            document.querySelectorAll('.skill-category').forEach(categoryEl => {
                const oldCategory = categoryEl.dataset.category;
                const categoryNameInput = categoryEl.querySelector('.category-name');
                
                // Only proceed if we found the category name input
                if (categoryNameInput) {
                    const newCategory = categoryNameInput.value.trim();
                    
                    if (newCategory && newCategory !== oldCategory) {
                        // Only update if we have skills to move
                        if (skillsData[oldCategory]) {
                            skillsData[newCategory] = [...skillsData[oldCategory]];
                            delete skillsData[oldCategory];
                        } else {
                            // If no skills exist for this category, just create an empty array
                            skillsData[newCategory] = [];
                        }
                    }
                }
            });
            
            // Save to local storage
            saveToLocalStorage('skillsInfo', skillsData);
            
            // Update UI
            loadSkillsInfo();
            closeModal();
            
            // Show success message
            const successMsg = document.createElement('div');
            successMsg.textContent = 'Đã lưu thay đổi kỹ năng!';
            successMsg.style.color = '#4CAF50';
            successMsg.style.marginTop = '10px';
            successMsg.style.textAlign = 'center';
            
            const skillsSection = document.getElementById('skillsInfo');
            skillsSection.appendChild(successMsg);
            
            setTimeout(() => {
                successMsg.style.opacity = '0';
                setTimeout(() => successMsg.remove(), 300);
            }, 2000);
        }

        // Project Editor Functions
        const projectsModal = document.getElementById('projectsModal');
        const closeProjectsModal = document.getElementById('closeProjectsModal');
        const cancelProjectsBtn = document.getElementById('cancelProjectsBtn');
        const projectsEditor = document.getElementById('projectsEditor');
        let projectsData = [];

        // Initialize projects editor
        function initProjectsEditor() {
            // Load saved projects data or initialize with empty array
            const savedProjects = loadFromLocalStorage('projectsInfo');
            projectsData = savedProjects || [];
            renderProjectsEditor();
        }

        // Open projects editor modal
        function openProjectsEditor() {
            console.log('Opening projects editor...');
            
            try {
                // Load projects data from localStorage
                const savedProjects = loadFromLocalStorage('projectsInfo') || [
                    {
                        title: "Website nghe nhạc",
                        link: "https://music-by-duycong.vercel.app/",
                        features: [
                            "Giao diện thân thiện, dễ sử dụng",
                            "Phát lại và phát ngẫu nhiên",
                            "Điều khiển phát nhạc đơn giản – phát/tạm dừng, tua tiến/lùi."
                        ]
                    }
                ];
                
                // Update projectsData with loaded projects
                projectsData = savedProjects;
                
                // Render the editor with the loaded data
                renderProjectsEditor();
                
                // Show the modal
                projectsModal.style.display = 'flex';
                document.body.style.overflow = 'hidden';
                
                // Trigger reflow to enable CSS transitions
                void projectsModal.offsetWidth;
                
                // Add show class for animation
                projectsModal.classList.add('show');
                console.log('Projects modal loaded with data:', projectsData);
                
            } catch (error) {
                console.error('Error in openProjectsEditor:', error);
            }
        }

        // Render projects editor UI
        function renderProjectsEditor() {
            projectsEditor.innerHTML = '';
            
            projectsData.forEach((project, index) => {
                const projectEl = document.createElement('div');
                projectEl.className = 'project-edit-item';
                projectEl.dataset.index = index;
                
                projectEl.innerHTML = `
                    <div class="project-edit-header">
                        <input type="text" class="project-name" value="${project.title || ''}" placeholder="Tên dự án">
                        <input type="text" class="project-link" value="${project.link || ''}" placeholder="Link dự án">
                        <button class="remove-project" data-index="${index}">Xóa</button>
                    </div>
                    <div class="features-list">
                        ${(project.features || []).map((feature, i) => `
                            <div class="feature-item">
                                <input type="text" class="feature-input" value="${feature}" placeholder="Tính năng">
                                <button class="btn btn-sm btn-outline-danger remove-feature" data-index="${i}">&times;</button>
                            </div>
                        `).join('')}
                    </div>
                    <div class="feature-input-group">
                        <input type="text" class="new-feature" placeholder="Thêm tính năng mới">
                        <button class="btn btn-primary add-feature" data-project-index="${index}">Thêm tính năng</button>
                    </div>
                `;
                
                projectsEditor.appendChild(projectEl);
            });
            
            // Add event listeners
            addProjectEventListeners();
        }

        // Add event listeners for project editor
        function addProjectEventListeners() {
            // Add feature
            document.querySelectorAll('.add-feature').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const projectIndex = parseInt(e.target.dataset.projectIndex);
                    const featureInput = e.target.previousElementSibling;
                    const featureText = featureInput.value.trim();
                    
                    if (featureText) {
                        if (!projectsData[projectIndex].features) {
                            projectsData[projectIndex].features = [];
                        }
                        projectsData[projectIndex].features.push(featureText);
                        renderProjectsEditor();
                        featureInput.value = '';
                    }
                });
            });
            
            // Remove feature
            document.querySelectorAll('.remove-feature').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const projectIndex = parseInt(e.target.closest('.project-edit-item').dataset.index);
                    const featureIndex = parseInt(e.target.dataset.index);
                    
                    projectsData[projectIndex].features.splice(featureIndex, 1);
                    renderProjectsEditor();
                });
            });
            
            // Remove project
            document.querySelectorAll('.remove-project').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const projectIndex = parseInt(e.target.dataset.index);
                    if (confirm('Xóa dự án này?')) {
                        projectsData.splice(projectIndex, 1);
                        renderProjectsEditor();
                    }
                });
            });
        }

        // Save projects to local storage and update UI
        function saveProjects() {
            // Update projects data with any pending changes
            const updatedProjects = [];
            
            document.querySelectorAll('.project-edit-item').forEach((projectEl) => {
                const projectName = projectEl.querySelector('.project-name').value.trim();
                const projectLink = projectEl.querySelector('.project-link').value.trim();
                const features = Array.from(projectEl.querySelectorAll('.feature-input'))
                    .map(input => input.value.trim())
                    .filter(text => text !== '');
                
                if (projectName) {  // Only add if project has a name
                    updatedProjects.push({
                        title: projectName,
                        link: projectLink,
                        features: features
                    });
                }
            });
            
            projectsData = updatedProjects;
            
            // Save to local storage
            saveToLocalStorage('projectsInfo', projectsData);
            
            // Update UI
            loadProjectsInfo();
            closeProjectsModalFunction();
            
            // Show success message
            const successMessage = document.createElement('div');
            successMessage.className = 'success-message';
            successMessage.textContent = 'Đã lưu thay đổi dự án!';
            document.querySelector('.projects-section').appendChild(successMessage);
            
            // Remove success message after 2 seconds
            setTimeout(() => {
                successMessage.remove();
            }, 2000);
        }

        // Close projects modal
        function closeProjectsModalFunction() {
            // Remove show class for fade out animation
            projectsModal.classList.remove('show');
            
            // Wait for animation to complete before hiding
            setTimeout(() => {
                if (!projectsModal.classList.contains('show')) {
                    projectsModal.style.display = 'none';
                    document.body.style.overflow = 'auto';
                }
            }, 300);
        }

        // Close modal
        function closeModal() {
            // Remove show class for fade out animation
            skillsModal.classList.remove('show');
            
            // Wait for animation to complete before hiding
            setTimeout(() => {
                if (!skillsModal.classList.contains('show')) {
                    skillsModal.style.display = 'none';
                    document.body.style.overflow = 'auto';
                }
            }, 300); // Match this with CSS transition duration
        }

        // Event listeners for modal
        closeSkillsModal.addEventListener('click', closeModal);
        cancelSkillsBtn.addEventListener('click', closeModal);
        
        // Close modal when clicking outside
        window.addEventListener('click', (e) => {
            if (e.target === skillsModal) {
                closeModal();
            }
        });

        // Add event listener for save button
        document.getElementById('saveSkillsBtn').addEventListener('click', saveSkills);
        
        // Add event listener for add category button
        document.getElementById('addCategoryBtn').addEventListener('click', () => {
            const categoryName = prompt('Nhập tên danh mục kỹ năng mới:');
            if (categoryName && categoryName.trim() !== '') {
                if (!skillsData[categoryName]) {
                    skillsData[categoryName] = [];
                    renderSkillsEditor();
                } else {
                    alert('Danh mục đã tồn tại!');
                }
            }
        });

        // Event listeners for projects modal
        closeProjectsModal.addEventListener('click', closeProjectsModalFunction);
        cancelProjectsBtn.addEventListener('click', closeProjectsModalFunction);
        
        // Add project button
        document.getElementById('addProjectBtn').addEventListener('click', () => {
            projectsData.push({
                title: 'Dự án mới ' + (projectsData.length + 1),
                link: '',
                features: []
            });
            renderProjectsEditor();
            
            // Scroll to the bottom to show the newly added project
            projectsEditor.scrollTop = projectsEditor.scrollHeight;
        });
        
        // Save projects button
        document.getElementById('saveProjectsBtn').addEventListener('click', saveProjects);
        
        // Close modal when clicking outside
        window.addEventListener('click', (e) => {
            if (e.target === projectsModal) {
                closeProjectsModalFunction();
            }
        });

        // Initialize the skills editor when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize projects editor
            initProjectsEditor();
            
            // Add click handler for projects edit button
            const editProjectsBtn = document.getElementById('editProjectsBtn');
            if (editProjectsBtn) {
                editProjectsBtn.addEventListener('click', openProjectsEditor);
            } else {
                console.error('Could not find projects edit button');
            }
            // Initialize skills editor
            initSkillsEditor();
            
            // Load skills data or initialize with default data
            const savedSkills = loadFromLocalStorage('skillsInfo');
            if (savedSkills) {
                skillsData = savedSkills;
                loadSkillsInfo();
                loadSkillsInfo();
            } else {
                // Add default skills if none exist
                skillsData = {
                    'Frontend': ['HTML5', 'CSS3', 'React'],
                    'Backend': ['Node.js', 'Express', 'Django'],
                    'Ứng dụng': ['C#', 'WPF Framework'],
                    'Công cụ': ['Git', 'Docker'],
                    'Database': ['MySQL', 'Postgresql', 'Elasticsearch']
                };
                saveToLocalStorage('skillsInfo', skillsData);
            }
            loadSkillsInfo();
        });

        // Load saved data when page loads
        loadSavedData();

        // Add animation to skills badges
        skillBadges.forEach(badge => {
            const category = badge.getAttribute('data-category');
            const advancedSkills = document.querySelector(`.advanced-skills[data-category="${category}"]`);

            badge.addEventListener('click', () => {
                badge.classList.toggle('active');
                advancedSkills.classList.toggle('active');
            });
        });
    </script>
</body>
</html>